#ifndef CRO_MATH_h
#define CRO_MATH_h

/**
## add or +
`add: Number Number... -> Number` or `+: Number Number... -> Number`

The `add` function (also known as `+`) is used to add any number of arguments together.

### Syntax
`(add arg1 arg2 ... argN)` or `(+ arg1 arg2 ... argN)`

### Parameters
- `arg1, arg2, ... argN` - any number of parameters representing the values to be added together.

### Return Value
The `add` function (or `+` operator) returns the sum of all the provided values.

### Example Usage
```
(add 2 3) ;; returns 5
(+ 1 2 3 4) ;; returns 10
```
 */
CRO_Value CRO_add(CRO_State *s, CRO_Value args);

/**
## sub or -
`sub: Number Number... -> Number` `-: Number Number... -> Number`

The `sub` function (also known as `-`) is used to subtract any number of arguments together. The first two arguments are subtracted first, then their result is subtracted from the next, and so on.

### Syntax
`(sub arg1 arg2 ... argN)` or `(- arg1 arg2 ... argN)`

### Parameters
- `arg1` - the first parameter representing the initial value to subtract from.
- `arg2` - the second parameter representing the value to subtract from `arg1`.
- `arg3, ... argN` - any additional parameters representing the values to be subtracted.

### Return Value
The `sub` function (or `-` operator) returns the result of subtracting all the provided values in order.

### Example Usage
```
(sub 10 2 3) ;; returns 5 (10 - 2 - 3)
(- 20 5 3 2) ;; returns 10 (20 - 5 - 3 - 2)
 ```
 */
CRO_Value CRO_sub(CRO_State *s, CRO_Value args);

/**
## mul or *

`mul: Number Number... -> Number` or `*: Number Number... -> Number`

The `mul` function (also known as `*`) multiplies any number of arguments together and returns the result.

### Syntax
`(* num1 num2 ...)` or `(mul num1 num2 ...)`

### Parameters
- `num1`, `num2`, ... - Required parameters that specify the numbers to be multiplied together.

### Return Value
The `mul` function returns the product of all the numbers provided as arguments.

### Example Usage
```
(mul 2 3) ;; returns 6
(* 2 3 4) ;; returns 24
(mul 2 3 4 5) ;; returns 120
```
 */
CRO_Value CRO_mul(CRO_State *s, CRO_Value args);

/**
## div or /

`div: Number Number... -> Number`

The `div` function divides the first argument by the product of the remaining arguments and returns the result.

### Syntax
`(/ dividend divisor1 divisor2 ... divisorN)` or `(div dividend divisor1 divisor2 ... divisorN)`

### Parameters
- `dividend` - Required parameter that specifies the number to be divided.
- `divisor1` - Required parameter that specify the divisor to be used in the division.
- `divisor2 ... divisorN`- Optional parameters that specify additional divisors to be used in the division.

### Return Value
The `div` function returns the result of dividing the dividend by the product of the divisors.

### Example Usage
```
(div 10 2 5) ;; returns 1
(/ 100 2 5 2) ;; returns 10
(div 20 2 2 5) ;; returns 2
```
*/
CRO_Value CRO_div(CRO_State *s, CRO_Value args);

/**
## mod or %

`mod: Number Number -> Number` or `%: Number Number -> Number`

The `mod` or `%` function calculates the modulus of two numbers.

### Syntax
`(mod x y)`

`(% x y)`

### Parameters
- `x` - a required parameter that represents the dividend number.
- `y` - a required parameter that represents the divisor number.

### Return Value
The `mod` or `%` function returns the remainder of the division of `x` by `y`.

### Example Usage
```
(mod 10 3) ;; returns 1
(% 10 3) ;; returns 1
```
*/
CRO_Value CRO_mod(CRO_State *s, CRO_Value args);

/**
## sqrt
`sqrt: Number -> Number`

The `sqrt` function is used to calculate the square root of a number.

### Syntax
`(sqrt num)`

### Parameters
- `num` - a required parameter that specifies the number to calculate the square root of.

### Return Value
The `sqrt` function returns the square root of the provided number.

### Example Usage
```
(sqrt 4) ;; returns 2
(sqrt 25) ;; returns 5
```
 */
CRO_Value CRO_sqrt(CRO_State *s, CRO_Value args);

/**
## srand

`srand: Number -> Number`

The `srand` function seeds the random number generator with a given number. The seed determines the sequence of random numbers that will be generated by subsequent calls to the `rand` function.

### Syntax
`(srand seed)`

### Parameters
- `seed` - a required parameter that specifies the seed for the random number generator.

### Return Value
The `srand` function returns the seed that was provided as an argument.

### Example Usage
```
(srand 12345) ;; seeds the random number generator with the number 12345
```
Note: Crow is automatically seeded at startup, so calls to `srand` are only needed if you need predictable random results using a constant seed.
*/
CRO_Value CRO_srand(CRO_State *s, CRO_Value args);

/**
## rand
`rand: -> Number`

The `rand` function generates a random number between 0 and 1.

### Syntax
`(rand)`

### Parameters
The `rand` function takes no arguments.

### Return Value
The `rand` function returns a random number between 0 and 1.

### Example Usage
```
(defvar x (rand)) ;; x is assigned a random number between 0 and 1
```
*/
CRO_Value CRO_rand(CRO_State *s, CRO_Value args);

/**
## round

The `round` function is used to round a number to the nearest integer.

### Syntax
```
(round number)
```

### Parameters
- `number` - a required parameter that specifies the number to be rounded.

### Return Value
The `round` function returns the number rounded to the nearest integer.

### Example Usage
```
(round 2.6) ;; returns 3
(round 4.4) ;; returns 4
(round -3.7) ;; returns -4
```
*/
CRO_Value CRO_round(CRO_State *s, CRO_Value args);

/**
## floor
`floor: Number -> Number`

The `floor` function rounds a number down to the nearest integer.

### Syntax
`(floor num)`

### Parameters
- `num` - a required parameter that specifies the number to be rounded down.

### Return Value
The `floor` function returns the nearest integer that is less than or equal to the input number.

### Example Usage
```
(floor 2.6) ;; returns 2
(floor 4.4) ;; returns 4
(floor -3.7) ;; returns -4
```
*/
CRO_Value CRO_floor(CRO_State *s, CRO_Value args);

/**
## ceil
`ceil: Number -> Number`

The `ceil` function is used to calculate the ceiling of a number.

### Syntax
`(ceil num)`

### Parameters
- `num` - a required parameter that specifies the number whose ceiling is to be calculated.

### Return Value
The `ceil` function returns the smallest integer greater than or equal to the specified number.

### Example Usage
```
(ceil 2.6) ;; returns 3
(ceil 4.4) ;; returns 5
(ceil -3.7) ;; returns -3
```
*/
CRO_Value CRO_ceil(CRO_State *s, CRO_Value args);

/**
## sin
`sin: Number -> Number`

The `sin` function is used to calculate the sine of a number in radians.

### Syntax
`(sin x)`

### Parameters
- `x` - a required parameter that specifies the angle in radians.

### Return Value
The `sin` function returns the sine of the angle in radians.

### Example Usage
```
(defvar angle (/ math-PI 2)) ;; defines an angle of 90 degrees in radians
(sin angle) ;; returns 1, which is the sine of 90 degrees
```
*/
CRO_Value CRO_sin(CRO_State *s, CRO_Value args);

/**
## cos

`cos: Number -> Number`

The `cos` function is used to calculate the cosine of a given angle in radians.

### Syntax
`(cos x)`

### Parameters
- `x` - a required parameter that specifies the angle in radians.

### Return Value
The `cos` function returns the cosine of the given angle.

### Example Usage
```
(cos (* math-PI 0.5)) ;; returns 0
(cos (* math-PI 0.25)) ;; returns approximately 0.707
```
*/
CRO_Value CRO_cos(CRO_State *s, CRO_Value args);

/**
## tan
`tan: Number -> Number`

The `tan` function calculates the tangent of a given angle in radians.

### Syntax
`(tan angle)`

### Parameters
- `angle` - a required parameter that specifies the angle in radians for which the tangent should be calculated.

### Return Value
The `tan` function returns the tangent of the specified angle.

### Example Usage
```
(tan (/ math-PI 4)) ;; returns 1
```
*/
CRO_Value CRO_tan(CRO_State *s, CRO_Value args);

/**
## arcsin
`arcsin: Number -> Number`

The `arcsin` function is used to calculate the inverse sine of a number in radians.

### Syntax
`(arcsin x)`

### Parameters
- `x` - a required parameter that specifies the number to calculate the inverse sine of.

### Return Value
The `arcsin` function returns the inverse sine of the input number in radians.

### Example Usage
```
(arcsin 0.5) ;; returns 0.5235987755982988, which is approximately equal to pi/6
```
*/
CRO_Value CRO_arcsin(CRO_State *s, CRO_Value args);

/**
## arccos
`arccos: Number -> Number`

The `arccos` function is used to calculate the arccosine of a given number.

### Syntax
`(arccos x)`

### Parameters
- `x` - a required parameter that specifies the number for which the arccosine should be calculated.

### Return Value
The `arccos` function returns the arccosine of the input number as a number in radians.

### Example Usage
```
(arccos 1) ;; returns 0
(arccos 0) ;; returns pi/2
```
*/
CRO_Value CRO_arccos(CRO_State *s, CRO_Value args);

/**
## arctan
`arctan: Number -> Number`

The `arctan` function is used to calculate the arctangent of a number in radians.

### Syntax
`(arctan number)`

### Parameters
- `number` - a required parameter that specifies the number whose arctangent should be calculated.

### Return Value
The `arctan` function returns the arctangent of the given number in radians.

### Example Usage
```
(arctan 1) ;; returns 0.7853981633974483
```
*/
CRO_Value CRO_arctan(CRO_State *s, CRO_Value args);

/**
## sinh
`sinh: Number -> Number`

The `sinh` function returns the hyperbolic sine of a given number.

### Syntax
`(sinh x)`

### Parameters
- `x` - a required parameter that specifies the input value in radians.

### Return Value
The `sinh` function returns the hyperbolic sine of the input value.

### Example Usage
```
(sinh 0) ;; returns 0
(sinh 1) ;; returns 1.1752011936438014
(sinh 2.5) ;; returns 6.050204481985453
```
*/
CRO_Value CRO_sinh(CRO_State *s, CRO_Value args);

/**
## cosh
`cosh: Number -> Number`

The `cosh` function is used to calculate the hyperbolic cosine of a given number.

### Syntax
`(cosh num)`

### Parameters
- `num` - a required parameter that specifies the number in radians whose hyperbolic cosine should be calculated.

### Return Value
The `cosh` function returns the hyperbolic cosine of the specified number.

### Example Usage
```
(cosh 0) ;; returns 1
(cosh 1) ;; returns 1.5430806348152437
(cosh -1) ;; returns 1.5430806348152437
```
*/
CRO_Value CRO_cosh(CRO_State *s, CRO_Value args);

/**
## tanh
`tanh: Number -> Number`

The `tanh` function is used to calculate the hyperbolic tangent of a given number.

### Syntax
`(tanh x)`

### Parameters
- `x` - a required parameter that specifies the number in radians whose hyperbolic tangent should be calculated.

### Return Value
The `tanh` function returns the hyperbolic tangent of the given number.

### Example Usage
```
(tanh 1) ;; returns 0.7615941559557649
(tanh 0) ;; returns 0
(tanh -1) ;; returns -0.7615941559557649
```
*/
CRO_Value CRO_tanh(CRO_State *s, CRO_Value args);

#endif
